import { Component, Input, OnInit } from '@angular/core';

const nLog = (target: any, name: any, descriptor: any) => {
  console.log(target, name, descriptor);
  // store the original function in a variable
  const nOriginal = descriptor.value
  /* do some manipulations with descriptor.value 
    the descriptor.value is the body of the function that has the decorator @nLog 
    before it */
  descriptor.value = () => {
    console.log('This function was hacked!');    
  }
  //return the descriptor
}

const nLog1 = (target: any, name: any, descriptor: any) => {
  console.log(target, name, descriptor);
  // store the original function in a variable
  const nOriginal = descriptor.value
  /* do some manipulations with descriptor.value 
    the descriptor.value is the body of the function that has the decorator @nLog 
    before it */
  descriptor.value = (...args: any) => {
    console.log('Arguments ', args, ' were passed in this function'); 
    const result = nOriginal.apply(this, args)   
    console.log('The result of the function is ', result);  
  //return the descriptor 
    return result 
  }
}

// const nLog2 = (className: any) => {
//   console.log(className);  
//   return (...args: any[]) => {
//     console.log('Arguments passed to this class\'s constructor are ', args);
//     return new className(...args);
//   }
// }

// @nLog2
// class myExampleClass {
//   constructor(arg1: any, arg2: any) {
//     console.log('Constructor fired!');    
//   }
// }

// const myClass = new myExampleClass(5, 10);

@Component({
  selector: 'app-examples',
  templateUrl: './examples.component.html',
  styleUrls: ['./examples.component.css']
})
export class ExamplesComponent implements OnInit {
  text: string = '';
  @Input() text1: string = '';
  bitwiseOr = 2 | 5 // 010 101 => 0 | 1 = 1 then 1 | 0 is 1 | then 0 | 1 = 1; 111
  coords: string = '';

  constructor() {
    console.log('This statement was generated by the constructor ', this.aSimpleMethod1(5));
  }

  ngOnInit(): void {
  }

  showMouseCoords(event: any) {
    this.coords = `X: ${event.clientX} Y: ${event.clientY}`;    
  }

  updateValue(e: any) {
    this.text = e.target.value;    
  }

  // This is a member decorator and body of decorator must be above the class itself
  @nLog
  aSimpleMethod() {
    console.log("Hey there");
    
  }

  @nLog1
  aSimpleMethod1(a: number) {
    return a * a
  }
}
